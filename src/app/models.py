from django.db import models
from django.contrib.auth.models import User

# Create your models here.

import json
import uuid

from django.db import models
import requests


class BaseObject(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True


class DictObject(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.TextField(null=False)
    priority = models.IntegerField(null=False, default=0)

    def __str__(self):
        return self.name

    class Meta:
        abstract = True


class State(DictObject):
    class Meta:
        verbose_name = 'State'
        verbose_name_plural = 'States'


class OperatingSystem(DictObject):
    class Meta:
        verbose_name = 'OperatingSystem'
        verbose_name_plural = 'OperatingSystems'


class Vendor(DictObject):
    class Meta:
        verbose_name = 'Vendor'
        verbose_name_plural = 'Vendors'


class Application(DictObject):
    class Meta:
        verbose_name = 'Application'
        verbose_name_plural = 'Applications'


class Task(DictObject):
    class Meta:
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'


class Brand(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    vendor = models.ForeignKey(Vendor, on_delete=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.TextField(null=False)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Brand'
        verbose_name_plural = 'Brands'


class Device(BaseObject):
    OFFLINE = 'Offline'
    ONLINE = 'Online'
    UNAUTHORIZED = 'Unauthorized'

    STATUS_CHOICES = (
        (OFFLINE, 'Offline'),
        (ONLINE, 'Online'),
        (UNAUTHORIZED, 'Unauthorized'),
    )

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    operating_system = models.ForeignKey(OperatingSystem, on_delete=False)
    brand = models.ForeignKey(Brand, on_delete=False)
    serial = models.CharField(max_length=64, null=False, unique=True)
    product = models.CharField(max_length=64, null=False, unique=False)
    hardware = models.CharField(max_length=64, null=False, unique=False)
    mem = models.CharField(max_length=64, null=False, unique=False)
    resolution = models.CharField(max_length=64, null=False, unique=False)
    status = models.CharField(
        max_length=16,
        choices=STATUS_CHOICES,
        default=OFFLINE,
    )

    def __str__(self):
        return "%s-%s" % (self.product, self.serial)

    class Meta:
        verbose_name = 'Device'
        verbose_name_plural = 'Devices'


class ApplicationVersion(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    application = models.ForeignKey(Application, on_delete=False)
    operating_system = models.ForeignKey(OperatingSystem, on_delete=False)
    version = models.CharField(max_length=32, null=False, unique=True)
    link = models.URLField(max_length=255, null=False, unique=True)

    def __str__(self):
        return "%s-%s" % (self.application.name, self.version)

    class Meta:
        verbose_name = 'ApplicationVersion'
        verbose_name_plural = 'ApplicationVersions'


class Requirement(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    application_version = models.ForeignKey(ApplicationVersion, on_delete=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.TextField(null=False)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Requirement'
        verbose_name_plural = 'Requirements'


class Case(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    requirement = models.ForeignKey(Requirement, on_delete=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.TextField(null=False)
    script = models.FileField(upload_to='./upload', max_length=128, null=False, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'


class Scheduler(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.TextField(null=False)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Scheduler'
        verbose_name_plural = 'Schedulers'


class TaskCase(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    task = models.ForeignKey(Task, on_delete=False)
    case = models.ForeignKey(Case, on_delete=False)

    def __str__(self):
        return "%s-%s" % (self.task.name, self.case.name)

    class Meta:
        verbose_name = 'TaskCase'
        verbose_name_plural = 'TaskCases'


class TaskDevice(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    task = models.ForeignKey(Task, on_delete=False)
    device = models.ForeignKey(Device, on_delete=False)

    def __str__(self):
        return "%s-%s" % (self.task.name, self.device.serial)

    class Meta:
        verbose_name = 'TaskDevice'
        verbose_name_plural = 'TaskDevices'


class TaskScheduler(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    task = models.ForeignKey(Task, on_delete=False)
    scheduler = models.ForeignKey(Scheduler, on_delete=False)

    def __str__(self):
        return "%s-%s" % (self.task.name, self.scheduler.name)

    class Meta:
        verbose_name = 'TaskScheduler'
        verbose_name_plural = 'TaskSchedulers'


class TaskRuntime(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    task = models.ForeignKey(Task, on_delete=False)
    state = models.ForeignKey(State, on_delete=False)
    case = models.ForeignKey(Case, on_delete=False)
    scheduler = models.ForeignKey(Scheduler, on_delete=False)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'TaskRuntime'
        verbose_name_plural = 'TaskRuntimes'

