from django.db import models
from django.contrib.auth.models import User

# Create your models here.

import json
import uuid

from django.db import models
import requests


class BaseObject(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

class State(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)
    priority = models.IntegerField(null=False, default=0)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'State'
        verbose_name_plural = 'States'


class OperatingSystem(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)
    priority = models.IntegerField(null=False, default=0)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'OperatingSystem'
        verbose_name_plural = 'OperatingSystems'


class Vendor(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)
    priority = models.IntegerField(null=False, default=0)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Vendor'
        verbose_name_plural = 'Vendors'


class Brand(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    vendor = models.ForeignKey(Vendor, on_delete=False)
    name = models.CharField(max_length=64, null=False, unique=True)
    priority = models.IntegerField(null=False, default=0)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Brand'
        verbose_name_plural = 'Brands'


class Device(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    operating_system = models.ForeignKey(OperatingSystem, on_delete=False)
    brand = models.ForeignKey(Brand, on_delete=False)
    serial = models.CharField(max_length=64, null=False, unique=True)
    product = models.CharField(max_length=64, null=False, unique=True)
    hardware = models.CharField(max_length=64, null=False, unique=True)
    mem = models.CharField(max_length=64, null=False, unique=True)
    resolution = models.CharField(max_length=64, null=False, unique=True)

    def __str__(self):
        return "%s-%s" % (self.product, self.serial)

    class Meta:
        verbose_name = 'Device'
        verbose_name_plural = 'Devices'


class Application(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=64, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Application'
        verbose_name_plural = 'Applications'


class ApplicationVersion(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    application = models.ForeignKey(Application, on_delete=False)
    operating_system = models.ForeignKey(OperatingSystem, on_delete=False)
    version = models.CharField(max_length=32, null=False, unique=True)
    link = models.CharField(max_length=255, null=False, unique=True)

    def __str__(self):
        return "%s-%s" % (self.application.name, self.version)

    class Meta:
        verbose_name = 'ApplicationVersion'
        verbose_name_plural = 'ApplicationVersions'


class Requirement(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    application_version = models.ForeignKey(ApplicationVersion, on_delete=False)
    name = models.CharField(max_length=32, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Requirement'
        verbose_name_plural = 'Requirements'


class Case(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    requirement = models.ForeignKey(Requirement, on_delete=False)
    name = models.CharField(max_length=64, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)
    script = models.CharField(max_length=128, null=False, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'


class Task(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=64, null=False, unique=True)
    desc = models.CharField(max_length=128, null=False, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'


class TaskConfig(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    task = models.ForeignKey(Task, on_delete=False)
    case = models.ForeignKey(Case, on_delete=False)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'TaskConfig'
        verbose_name_plural = 'TaskConfigs'


class Runtime(BaseObject):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    task = models.ForeignKey(Task, on_delete=False)
    device = models.ForeignKey(Device, on_delete=False)
    state = models.ForeignKey(State, on_delete=False)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = 'Runtime'
        verbose_name_plural = 'Runtimes'

